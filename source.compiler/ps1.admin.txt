Function IsNotAdmin {$CurrentUser = New-Object Security.Principal.WindowsPrincipal $([Security.Principal.WindowsIdentity]::GetCurrent());$CurrentUser.IsInRole([Security.Principal.WindowsBuiltinRole]::Administrator) -eq $False}
If (IsNotAdmin) {
  Try {
    [String]$Script:ShBatScriptArgs = ($Args | ForEach-Object { '''{0}''' -f $_}) -Join(',');
    $PSInfo = New-Object System.Diagnostics.ProcessStartInfo
    $PSInfo.LoadUserProfile = $false;
    $PSInfo.FileName = "$Env:SystemRoot\System32\WindowsPowerShell\v1.0\powershell.exe"
    $PSInfo.Arguments = @(
      "-NoProfile",
      "-ExecutionPolicy", "Bypass",
      "-InputFormat", "None",
      "-Command", """`$ShBatScriptBlock=[ScriptBlock]::Create(`'`$Script:ShBatScriptFile=`'`'$Script:ShBatScriptFile`'`';`$Script:PSScriptRoot=`'`'$Script:PSScriptRoot`'`';Push-Location -LiteralPath `'`'$Script:PSScriptRoot`'`';`'+(Get-Content -Path `'$Script:ShBatScriptFile`' | Out-String));Invoke-Command -ScriptBlock (`$Script:ShBatScriptBlock)"""
      "-Arg", "@($($Script:ShBatScriptArgs))"
    );
    $PSInfo.Verb = "runas"
    # [System.Diagnostics.Process]::Start($PSInfo);
    $PSProcess = New-Object System.Diagnostics.Process
    $PSProcess.StartInfo = $PSInfo
    Try{
      $PSProcess.Start() | Out-Null
      $PSProcess.WaitForExit();
      # Write-Host "Admin Exit Code $([String]$PSProcess.ExitCode)"
      Exit $PSProcess.ExitCode;
    } Catch [System.Management.Automation.MethodInvocationException]{Write-Host "`nRight-click script then select `"Run as administrator`"`n";Exit 1}
  }
Catch [System.InvalidOperationException]{Write-Host "`nRight-click script then select `"Run as administrator`"`n";Exit 1}
Finally {If(IsError){Write-Throw;Exit 1}Exit 0}};